generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

enum MeetingStatus {
  PROCESSING
  COMPLETED
}

model User {
  id        String  @id @default(cuid())
  imageUrl  String?
  email     String  @unique
  firstName String?
  lastName  String?
  credits   Int     @default(150)

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  UserToProject     UserToProject[]
  Question          Question[]
  StripeTransaction StripeTransaction[]
}

model Project {
  id        String @id @default(cuid())
  name      String
  githubUrl String

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  UserToProject       UserToProject[]
  Commit              Commit[]
  SourceCodeEmbedding SourceCodeEmbedding[]
  Question            Question[]
  Meeting             Meeting[]
}

model UserToProject {
  id        String @id @default(cuid())
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, projectId])
}

model Commit {
  id                 String   @id @default(cuid())
  projectId          String
  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime
  summary            String

  project Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SourceCodeEmbedding {
  id               String                       @id @default(cuid())
  summaryEmbedding Unsupported("vector(1536)")?
  sourceCode       String
  fileName         String
  summary          String
  projectId        String

  project Project @relation(fields: [projectId], references: [id])
}

model Question {
  id             String @id @default(cuid())
  question       String
  answer         String
  fileReferences Json?
  projectId      String
  userId         String

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Meeting {
  id         String        @id @default(cuid())
  meetingUrl String
  projectId  String
  name       String
  status     MeetingStatus @default(PROCESSING)

  project Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Issue     Issue[]
}

model Issue {
  id        String @id @default(cuid())
  start     String
  end       String
  gist      String
  headline  String
  summary   String
  meetingId String

  meeting Meeting @relation(fields: [meetingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StripeTransaction {
  id      String @id @default(cuid())
  userId  String
  credits Int

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
